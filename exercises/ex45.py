# -*- coding: utf-8 -*-
# -------------------------------------------------------------------------------
# Name:        ex45.py
# Topic:       你来制作一个游戏
# Author:      dk-joker
# Created:     10-16-2019
# -------------------------------------------------------------------------------

# 函数的风格：
# 1.在使用类的过程中，很大一部分时间是告诉类如何“做事情”。给这些函数命名的时候，与其命名
# 成一个名词，不如命名为一个动词，作为给类的一个命令。就和list的pop函数一样。他的名字而
# 不是remove_from_end_of_list，因为即使他的功能的确是这样，这一条字符也不是一个命令。
# 2.让函数保持简单小巧。由于某些原因，有些人开始学习类后就会忘记这一条。
# 
# 类的风格：
# 1.类应该使用”驼峰式大小写“，如应该使用SuperGoldFactory而不是super_gold_factory.
# 2.__init__不应该做太多的事情，这会让类变得难以使用。
# 3.用一致的方式组织函数的参数。如果类需要处理users，dogs和cats，就保持这个次序。
# （特殊情况除外）。如果一个函数的参数是（dog，cat，user），另一个的是（user，cat，
# dog），这会让函数使用起来很困难。
# 4.不要对全局变量或者来自模块的变量进行重定义或者赋值，让这些东西自顾自就行了。
# 5.永远都用class Name(object)的方式定义类，否则会遇到大问题！
#
# 代码风格：
# 1.为了方便他人阅读，为自己的代码字符之间留下一些空白。
# 2.如果一段代码你自己无法朗读出来，那么这段代码的可读性可能就有问题。那么该代码的
# 易读性需要作出改进。
# 3.学着模仿别人的风格写python程序，直到那天你找到自己的风格为止。
# 4.一旦你有了自己风格，也别太把它当会事儿。程序员的工作的一部分就是和别人的代码打交道
# 有的人审美就很差。其实你自己的审美也很差，只是你没有发现而已。
# 5.如果你发现有人写的代码风格你很喜欢，那就模仿他们的风格。
#
# 好的注释： 
# 1.有程序员会告诉你，你的代码需要足够的可读性，这样就无需写注释了。别理他，好好写注释。
# 2.写注释的时候，描述清楚为什么要这么做。代码只会告诉你‘这样实现’，而不会告诉你‘为什么
# 要这样实现’，而后者比前者更重要。
# 3.注释不要写的太多。
# 4.尽量让你的注释简单，而且如果代码修改了，记得检查注释并更新相关的注释。

